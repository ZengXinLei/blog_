2021-03-31 14:06:13.986 [ INFO] [                                      com.example.blog.BlogApplication: 55] - Starting BlogApplication on DESKTOP-6F8VJ3F with PID 2732 (E:\allCode\java\blog_master\target\classes started by asus in E:\allCode\java\blog_master)
2021-03-31 14:06:13.993 [ INFO] [                                      com.example.blog.BlogApplication:651] - No active profile set, falling back to default profiles: default
2021-03-31 14:06:14.769 [ WARN] [tis.spring.mapper.ClassPathMapperScanner: 44] - No MyBatis mapper was found in '[com.example.api]' package. Please check your configuration.
2021-03-31 14:06:14.875 [ INFO] [trationDelegate$BeanPostProcessorChecker:335] - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$230cd86b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-03-31 14:06:14.913 [ INFO] [n.server.AnnotationActionEndpointMapping:236] - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2021-03-31 14:06:15.202 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:108] - Tomcat initialized with port(s): 8088 (http)
2021-03-31 14:06:15.208 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8088"]
2021-03-31 14:06:15.209 [ INFO] [                              org.apache.catalina.core.StandardService:173] - Starting service [Tomcat]
2021-03-31 14:06:15.209 [ INFO] [                               org.apache.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.35]
2021-03-31 14:06:15.305 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring embedded WebApplicationContext
2021-03-31 14:06:15.306 [ INFO] [                               org.springfra.web.context.ContextLoader:284] - Root WebApplicationContext: initialization completed in 1278 ms
2021-03-31 14:06:15.777 [ INFO] [pertySourcedRequestMappingHandlerMapping: 69] - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-03-31 14:06:15.848 [ INFO] [hedulin.concurren.ThreadPoolTaskExecutor:181] - Initializing ExecutorService 'applicationTaskExecutor'
2021-03-31 14:06:16.020 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8088"]
2021-03-31 14:06:16.039 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:220] - Tomcat started on port(s): 8088 (http) with context path ''
2021-03-31 14:06:16.041 [ INFO] [plugins.DocumentationPluginsBootstrapper:160] - Context refreshed
2021-03-31 14:06:16.053 [ INFO] [plugins.DocumentationPluginsBootstrapper:163] - Found 1 custom documentation plugin(s)
2021-03-31 14:06:16.082 [ INFO] [.web.scanners.ApiListingReferenceScanner: 41] - Scanning for api listing references
2021-03-31 14:06:16.371 [ INFO] [                                      com.example.blog.BlogApplication: 61] - Started BlogApplication in 2.662 seconds (JVM running for 4.308)
2021-03-31 14:07:31.576 [ INFO] [                                      com.example.blog.BlogApplication: 55] - Starting BlogApplication on DESKTOP-6F8VJ3F with PID 14676 (E:\allCode\java\blog_master\target\classes started by asus in E:\allCode\java\blog_master)
2021-03-31 14:07:31.584 [ INFO] [                                      com.example.blog.BlogApplication:651] - No active profile set, falling back to default profiles: default
2021-03-31 14:07:32.540 [ WARN] [tis.spring.mapper.ClassPathMapperScanner: 44] - No MyBatis mapper was found in '[com.example.api]' package. Please check your configuration.
2021-03-31 14:07:32.656 [ INFO] [trationDelegate$BeanPostProcessorChecker:335] - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$c4071518] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-03-31 14:07:32.695 [ INFO] [n.server.AnnotationActionEndpointMapping:236] - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2021-03-31 14:07:33.020 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:108] - Tomcat initialized with port(s): 8088 (http)
2021-03-31 14:07:33.029 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8088"]
2021-03-31 14:07:33.029 [ INFO] [                              org.apache.catalina.core.StandardService:173] - Starting service [Tomcat]
2021-03-31 14:07:33.029 [ INFO] [                               org.apache.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.35]
2021-03-31 14:07:33.133 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring embedded WebApplicationContext
2021-03-31 14:07:33.133 [ INFO] [                               org.springfra.web.context.ContextLoader:284] - Root WebApplicationContext: initialization completed in 1517 ms
2021-03-31 14:07:33.729 [ INFO] [pertySourcedRequestMappingHandlerMapping: 69] - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-03-31 14:07:33.800 [ INFO] [hedulin.concurren.ThreadPoolTaskExecutor:181] - Initializing ExecutorService 'applicationTaskExecutor'
2021-03-31 14:07:33.967 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8088"]
2021-03-31 14:07:33.986 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:220] - Tomcat started on port(s): 8088 (http) with context path ''
2021-03-31 14:07:33.987 [ INFO] [plugins.DocumentationPluginsBootstrapper:160] - Context refreshed
2021-03-31 14:07:34.000 [ INFO] [plugins.DocumentationPluginsBootstrapper:163] - Found 1 custom documentation plugin(s)
2021-03-31 14:07:34.024 [ INFO] [.web.scanners.ApiListingReferenceScanner: 41] - Scanning for api listing references
2021-03-31 14:07:34.304 [ INFO] [                                      com.example.blog.BlogApplication: 61] - Started BlogApplication in 3.138 seconds (JVM running for 4.736)
2021-03-31 14:15:20.064 [ INFO] [                                      com.example.blog.BlogApplication: 55] - Starting BlogApplication on DESKTOP-6F8VJ3F with PID 21780 (E:\allCode\java\blog_master\target\classes started by asus in E:\allCode\java\blog_master)
2021-03-31 14:15:20.071 [ INFO] [                                      com.example.blog.BlogApplication:651] - No active profile set, falling back to default profiles: default
2021-03-31 14:15:20.859 [ WARN] [tis.spring.mapper.ClassPathMapperScanner: 44] - No MyBatis mapper was found in '[com.example.api]' package. Please check your configuration.
2021-03-31 14:15:20.967 [ INFO] [trationDelegate$BeanPostProcessorChecker:335] - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$110d10f8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-03-31 14:15:21.006 [ INFO] [n.server.AnnotationActionEndpointMapping:236] - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2021-03-31 14:15:21.305 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
2021-03-31 14:15:21.312 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2021-03-31 14:15:21.312 [ INFO] [                              org.apache.catalina.core.StandardService:173] - Starting service [Tomcat]
2021-03-31 14:15:21.313 [ INFO] [                               org.apache.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.35]
2021-03-31 14:15:21.418 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring embedded WebApplicationContext
2021-03-31 14:15:21.418 [ INFO] [                               org.springfra.web.context.ContextLoader:284] - Root WebApplicationContext: initialization completed in 1315 ms
2021-03-31 14:15:21.930 [ INFO] [pertySourcedRequestMappingHandlerMapping: 69] - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-03-31 14:15:22.007 [ INFO] [hedulin.concurren.ThreadPoolTaskExecutor:181] - Initializing ExecutorService 'applicationTaskExecutor'
2021-03-31 14:15:22.203 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
2021-03-31 14:15:22.215 [ WARN] [ConfigServletWebServerApplicationContext:558] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'; nested exception is org.springframework.boot.web.server.PortInUseException: Port 8080 is already in use
2021-03-31 14:15:22.216 [ INFO] [hedulin.concurren.ThreadPoolTaskExecutor:218] - Shutting down ExecutorService 'applicationTaskExecutor'
2021-03-31 14:15:22.219 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Pausing ProtocolHandler ["http-nio-8080"]
2021-03-31 14:15:22.219 [ INFO] [                              org.apache.catalina.core.StandardService:173] - Stopping service [Tomcat]
2021-03-31 14:15:22.224 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Stopping ProtocolHandler ["http-nio-8080"]
2021-03-31 14:15:22.225 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Destroying ProtocolHandler ["http-nio-8080"]
2021-03-31 14:15:22.230 [ INFO] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-03-31 14:15:22.233 [ERROR] [diagnosti.LoggingFailureAnalysisReporter: 40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2021-03-31 14:16:15.711 [ INFO] [                                      com.example.blog.BlogApplication: 55] - Starting BlogApplication on DESKTOP-6F8VJ3F with PID 18532 (E:\allCode\java\blog_master\target\classes started by asus in E:\allCode\java\blog_master)
2021-03-31 14:16:15.718 [ INFO] [                                      com.example.blog.BlogApplication:651] - No active profile set, falling back to default profiles: default
2021-03-31 14:16:16.810 [ WARN] [tis.spring.mapper.ClassPathMapperScanner: 44] - No MyBatis mapper was found in '[com.example.api]' package. Please check your configuration.
2021-03-31 14:16:16.962 [ INFO] [trationDelegate$BeanPostProcessorChecker:335] - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$47e56630] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-03-31 14:16:17.012 [ INFO] [n.server.AnnotationActionEndpointMapping:236] - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2021-03-31 14:16:17.565 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:108] - Tomcat initialized with port(s): 8088 (http)
2021-03-31 14:16:17.579 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8088"]
2021-03-31 14:16:17.580 [ INFO] [                              org.apache.catalina.core.StandardService:173] - Starting service [Tomcat]
2021-03-31 14:16:17.581 [ INFO] [                               org.apache.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.35]
2021-03-31 14:16:17.734 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring embedded WebApplicationContext
2021-03-31 14:16:17.734 [ INFO] [                               org.springfra.web.context.ContextLoader:284] - Root WebApplicationContext: initialization completed in 1970 ms
2021-03-31 14:16:18.403 [ INFO] [pertySourcedRequestMappingHandlerMapping: 69] - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-03-31 14:16:18.487 [ INFO] [hedulin.concurren.ThreadPoolTaskExecutor:181] - Initializing ExecutorService 'applicationTaskExecutor'
2021-03-31 14:16:18.695 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8088"]
2021-03-31 14:16:18.717 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:220] - Tomcat started on port(s): 8088 (http) with context path ''
2021-03-31 14:16:18.718 [ INFO] [plugins.DocumentationPluginsBootstrapper:160] - Context refreshed
2021-03-31 14:16:18.735 [ INFO] [plugins.DocumentationPluginsBootstrapper:163] - Found 1 custom documentation plugin(s)
2021-03-31 14:16:18.762 [ INFO] [.web.scanners.ApiListingReferenceScanner: 41] - Scanning for api listing references
2021-03-31 14:16:19.129 [ INFO] [                                      com.example.blog.BlogApplication: 61] - Started BlogApplication in 3.916 seconds (JVM running for 6.047)
2021-03-31 14:19:13.226 [ INFO] [                                      com.example.blog.BlogApplication: 55] - Starting BlogApplication on DESKTOP-6F8VJ3F with PID 13160 (E:\allCode\java\blog_master\target\classes started by asus in E:\allCode\java\blog_master)
2021-03-31 14:19:13.234 [ INFO] [                                      com.example.blog.BlogApplication:651] - No active profile set, falling back to default profiles: default
2021-03-31 14:19:13.988 [ WARN] [tis.spring.mapper.ClassPathMapperScanner: 44] - No MyBatis mapper was found in '[com.example.api]' package. Please check your configuration.
2021-03-31 14:19:14.101 [ INFO] [trationDelegate$BeanPostProcessorChecker:335] - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$4fb838e1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-03-31 14:19:14.141 [ INFO] [n.server.AnnotationActionEndpointMapping:236] - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2021-03-31 14:19:14.430 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:108] - Tomcat initialized with port(s): 8088 (http)
2021-03-31 14:19:14.438 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8088"]
2021-03-31 14:19:14.438 [ INFO] [                              org.apache.catalina.core.StandardService:173] - Starting service [Tomcat]
2021-03-31 14:19:14.439 [ INFO] [                               org.apache.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.35]
2021-03-31 14:19:14.538 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring embedded WebApplicationContext
2021-03-31 14:19:14.538 [ INFO] [                               org.springfra.web.context.ContextLoader:284] - Root WebApplicationContext: initialization completed in 1273 ms
2021-03-31 14:19:15.049 [ INFO] [pertySourcedRequestMappingHandlerMapping: 69] - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-03-31 14:19:15.121 [ INFO] [hedulin.concurren.ThreadPoolTaskExecutor:181] - Initializing ExecutorService 'applicationTaskExecutor'
2021-03-31 14:19:15.291 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8088"]
2021-03-31 14:19:15.311 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:220] - Tomcat started on port(s): 8088 (http) with context path ''
2021-03-31 14:19:15.312 [ INFO] [plugins.DocumentationPluginsBootstrapper:160] - Context refreshed
2021-03-31 14:19:15.325 [ INFO] [plugins.DocumentationPluginsBootstrapper:163] - Found 1 custom documentation plugin(s)
2021-03-31 14:19:15.352 [ INFO] [.web.scanners.ApiListingReferenceScanner: 41] - Scanning for api listing references
2021-03-31 14:19:15.669 [ INFO] [                                      com.example.blog.BlogApplication: 61] - Started BlogApplication in 2.803 seconds (JVM running for 4.042)
2021-03-31 14:24:42.414 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-03-31 14:24:42.415 [ INFO] [.springfra.web.servlet.DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
2021-03-31 14:24:42.424 [ INFO] [.springfra.web.servlet.DispatcherServlet:547] - Completed initialization in 9 ms
2021-03-31 14:24:42.465 [ INFO] [                                    com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2021-03-31 14:24:43.714 [ INFO] [                                    com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2021-03-31 14:24:43.781 [ INFO] [                                            com.example.api.TouristApi: 55] - 注册成为游客   调用方法[signTourist]
2021-03-31 14:29:47.447 [ WARN] [che.catalina.util.SessionIdGeneratorBase:173] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [220] milliseconds.
2021-03-31 14:29:52.459 [ WARN] [                                       com.zaxxer.hikari.pool.PoolBase:184] - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@7c674b5a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-03-31 14:29:57.469 [ WARN] [                                       com.zaxxer.hikari.pool.PoolBase:184] - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@a9b6cb6 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-03-31 14:30:02.475 [ WARN] [                                       com.zaxxer.hikari.pool.PoolBase:184] - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@286fce01 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-03-31 14:30:07.491 [ WARN] [                                       com.zaxxer.hikari.pool.PoolBase:184] - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@40dffcc8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-03-31 14:30:12.503 [ WARN] [                                       com.zaxxer.hikari.pool.PoolBase:184] - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@5ce57e9e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-03-31 14:30:17.508 [ WARN] [                                       com.zaxxer.hikari.pool.PoolBase:184] - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@7460c1ba (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-03-31 14:30:17.516 [ERROR] [omcat].[localhos.[/].[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30059ms.
### The error may exist in com/example/mapping/LogMapping.java (best guess)
### The error may involve com.example.mapping.LogMapping.insertLog
### The error occurred while executing an update
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30059ms.] with root cause
com.mysql.cj.exceptions.ConnectionIsClosedException: No operations allowed after connection closed.
	at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:?]
	at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:?]
	at jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:?]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:490) ~[?:?]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.NativeSession.checkClosed(NativeSession.java:1171) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.checkClosed(ConnectionImpl.java:576) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.setNetworkTimeout(ConnectionImpl.java:2486) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.zaxxer.hikari.pool.PoolBase.setNetworkTimeout(PoolBase.java:560) ~[HikariCP-3.4.5.jar:?]
	at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:173) ~[HikariCP-3.4.5.jar:?]
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:186) ~[HikariCP-3.4.5.jar:?]
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:162) ~[HikariCP-3.4.5.jar:?]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:128) ~[HikariCP-3.4.5.jar:?]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) ~[spring-jdbc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) ~[spring-jdbc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) ~[spring-jdbc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184) ~[mybatis-3.5.4.jar:3.5.4]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at com.sun.proxy.$Proxy93.insert(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy104.insertLog(Unknown Source) ~[?:?]
	at com.example.aop.AopLog.infoApi(AopLog.java:54) ~[classes/:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.aspectj.AspectJMethodBeforeAdvice.before(AspectJMethodBeforeAdvice.java:44) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:55) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at com.example.api.UserApi$$EnhancerBySpringCGLIB$$84102241.login(<generated>) ~[classes/:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.lang.Thread.run(Thread.java:834) [?:?]
2021-03-31 14:30:21.849 [ WARN] [                                       com.zaxxer.hikari.pool.PoolBase:184] - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@19927066 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-03-31 14:30:26.861 [ WARN] [                                       com.zaxxer.hikari.pool.PoolBase:184] - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@17558d24 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-03-31 14:30:31.877 [ WARN] [                                       com.zaxxer.hikari.pool.PoolBase:184] - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@5668871f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-03-31 14:30:36.881 [ WARN] [                                       com.zaxxer.hikari.pool.PoolBase:184] - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@67f456e3 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-03-31 14:30:36.984 [ INFO] [                                               com.example.api.UserApi: 55] - 登录   调用方法[login]
2021-03-31 14:30:37.190 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:30:37.720 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 14:30:37.771 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:30:37.776 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:30:37.981 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:30:38.094 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 14:30:47.635 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:30:48.678 [ INFO] [                                            com.example.api.CommentApi: 55] - 获取所有评论的数量   调用方法[getAllCommentsPage]
2021-03-31 14:30:48.684 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:30:48.684 [ INFO] [                                            com.example.api.CommentApi: 55] - 分页获取所有评论，需要权限   调用方法[getAllComments]
2021-03-31 14:30:48.896 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:30:49.745 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 14:30:59.458 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:00.178 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:00.479 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 14:31:00.851 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 14:31:00.905 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:12.401 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:12.936 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:12.987 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:12.999 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 14:31:13.070 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 14:31:13.070 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:18.185 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:19.223 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:19.223 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 14:31:19.223 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 14:31:20.709 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:21.739 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的总页数   调用方法[getDraftPages]
2021-03-31 14:31:21.739 [ INFO] [                                              com.example.api.DraftApi: 55] - 分页获取草稿   调用方法[getDraftList]
2021-03-31 14:31:21.739 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:21.739 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:23.077 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:24.198 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 14:31:24.210 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:24.922 [ INFO] [                                            com.example.api.CommentApi: 55] - 分页获取所有评论，需要权限   调用方法[getAllComments]
2021-03-31 14:31:24.926 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:25.176 [ INFO] [                                            com.example.api.CommentApi: 55] - 获取所有评论的数量   调用方法[getAllCommentsPage]
2021-03-31 14:31:27.837 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:28.578 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:28.875 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 14:31:28.875 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 14:31:30.106 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:30.809 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:31.106 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 14:31:31.477 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:31:31.526 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 14:32:03.904 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:04.941 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 14:32:10.900 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:11.945 [ INFO] [                                            com.example.api.CommentApi: 55] - 获取所有评论的数量   调用方法[getAllCommentsPage]
2021-03-31 14:32:11.945 [ INFO] [                                            com.example.api.CommentApi: 55] - 分页获取所有评论，需要权限   调用方法[getAllComments]
2021-03-31 14:32:11.945 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:13.086 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:14.099 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 14:32:14.099 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:14.319 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:14.472 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 14:32:28.606 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:29.668 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 14:32:38.705 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:39.019 [ INFO] [                                              com.example.api.DraftApi: 55] - 保存草稿，有权限限制   调用方法[saveDrafts]
2021-03-31 14:32:41.813 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:42.558 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:42.811 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:42.857 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的总页数   调用方法[getDraftPages]
2021-03-31 14:32:42.863 [ INFO] [                                              com.example.api.DraftApi: 55] - 分页获取草稿   调用方法[getDraftList]
2021-03-31 14:32:44.250 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:44.943 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:32:45.261 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 14:32:45.630 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 14:32:45.681 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:35:08.519 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:35:09.285 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:35:09.545 [ INFO] [                                              com.example.api.DraftApi: 55] - 分页获取草稿   调用方法[getDraftList]
2021-03-31 14:35:09.588 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的总页数   调用方法[getDraftPages]
2021-03-31 14:35:09.588 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:35:10.928 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:35:11.616 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:35:11.930 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 14:35:12.308 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:35:12.345 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 14:36:04.215 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:36:47.260 [ INFO] [                                            com.example.api.CommentApi: 55] - 添加评论   调用方法[addComment]
2021-03-31 14:36:47.363 [ERROR] [omcat].[localhos.[/].[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: java.sql.SQLException: Incorrect string value: '\xE6\xB5\x8B\xE8\xAF\x95...' for column 'cText' at row 2
### The error may exist in com/example/mapping/CommentMapping.java (best guess)
### The error may involve com.example.mapping.CommentMapping.addComment-Inline
### The error occurred while setting parameters
### SQL: call addComment(?,?,?,?,?,?)
### Cause: java.sql.SQLException: Incorrect string value: '\xE6\xB5\x8B\xE8\xAF\x95...' for column 'cText' at row 2
; uncategorized SQLException; SQL state [HY000]; error code [1366]; Incorrect string value: '\xE6\xB5\x8B\xE8\xAF\x95...' for column 'cText' at row 2; nested exception is java.sql.SQLException: Incorrect string value: '\xE6\xB5\x8B\xE8\xAF\x95...' for column 'cText' at row 2] with root cause
java.sql.SQLException: Incorrect string value: '\xE6\xB5\x8B\xE8\xAF\x95...' for column 'cText' at row 2
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-3.4.5.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-3.4.5.jar:?]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184) ~[mybatis-3.5.4.jar:3.5.4]
	at jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source) ~[?:?]
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at com.sun.proxy.$Proxy93.insert(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271) ~[mybatis-spring-2.0.4.jar:2.0.4]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144) ~[mybatis-3.5.4.jar:3.5.4]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.4.jar:3.5.4]
	at com.sun.proxy.$Proxy100.addComment(Unknown Source) ~[?:?]
	at com.example.api.CommentApi.addComment(CommentApi.java:37) ~[classes/:?]
	at com.example.api.CommentApi$$FastClassBySpringCGLIB$$a9143bc0.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at com.example.api.CommentApi$$EnhancerBySpringCGLIB$$a0531783.addComment(<generated>) ~[classes/:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.lang.Thread.run(Thread.java:834) [?:?]
2021-03-31 14:36:50.725 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:36:59.211 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:36:59.934 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 14:37:00.226 [ INFO] [                                            com.example.api.CommentApi: 55] - 获取所有评论的数量   调用方法[getAllCommentsPage]
2021-03-31 14:37:00.226 [ INFO] [                                            com.example.api.CommentApi: 55] - 分页获取所有评论，需要权限   调用方法[getAllComments]
2021-03-31 14:38:32.282 [ INFO] [                                      com.example.blog.BlogApplication: 55] - Starting BlogApplication on DESKTOP-6F8VJ3F with PID 22352 (E:\allCode\java\blog_master\target\classes started by asus in E:\allCode\java\blog_master)
2021-03-31 14:38:32.289 [ INFO] [                                      com.example.blog.BlogApplication:651] - No active profile set, falling back to default profiles: default
2021-03-31 14:38:33.026 [ WARN] [tis.spring.mapper.ClassPathMapperScanner: 44] - No MyBatis mapper was found in '[com.example.api]' package. Please check your configuration.
2021-03-31 14:38:33.149 [ INFO] [trationDelegate$BeanPostProcessorChecker:335] - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$79fef7ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-03-31 14:38:33.188 [ INFO] [n.server.AnnotationActionEndpointMapping:236] - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2021-03-31 14:38:33.487 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:108] - Tomcat initialized with port(s): 8088 (http)
2021-03-31 14:38:33.494 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8088"]
2021-03-31 14:38:33.495 [ INFO] [                              org.apache.catalina.core.StandardService:173] - Starting service [Tomcat]
2021-03-31 14:38:33.495 [ INFO] [                               org.apache.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.35]
2021-03-31 14:38:33.597 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring embedded WebApplicationContext
2021-03-31 14:38:33.597 [ INFO] [                               org.springfra.web.context.ContextLoader:284] - Root WebApplicationContext: initialization completed in 1278 ms
2021-03-31 14:38:34.122 [ INFO] [pertySourcedRequestMappingHandlerMapping: 69] - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-03-31 14:38:34.208 [ INFO] [hedulin.concurren.ThreadPoolTaskExecutor:181] - Initializing ExecutorService 'applicationTaskExecutor'
2021-03-31 14:38:34.409 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8088"]
2021-03-31 14:38:34.429 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:220] - Tomcat started on port(s): 8088 (http) with context path ''
2021-03-31 14:38:34.430 [ INFO] [plugins.DocumentationPluginsBootstrapper:160] - Context refreshed
2021-03-31 14:38:34.442 [ INFO] [plugins.DocumentationPluginsBootstrapper:163] - Found 1 custom documentation plugin(s)
2021-03-31 14:38:34.466 [ INFO] [.web.scanners.ApiListingReferenceScanner: 41] - Scanning for api listing references
2021-03-31 14:38:34.734 [ INFO] [                                      com.example.blog.BlogApplication: 61] - Started BlogApplication in 2.789 seconds (JVM running for 4.251)
2021-03-31 14:38:54.820 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-03-31 14:38:54.821 [ INFO] [.springfra.web.servlet.DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
2021-03-31 14:38:54.834 [ INFO] [.springfra.web.servlet.DispatcherServlet:547] - Completed initialization in 13 ms
2021-03-31 14:38:54.886 [ INFO] [                                    com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2021-03-31 14:38:55.027 [ INFO] [                                    com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2021-03-31 14:38:55.519 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:39:00.690 [ INFO] [                                            com.example.api.CommentApi: 55] - 添加评论   调用方法[addComment]
2021-03-31 14:45:07.288 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章获取评论的数量   调用方法[getCommentCount]
2021-03-31 14:45:12.356 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:46:15.234 [ INFO] [                                            com.example.api.CommentApi: 55] - 添加评论   调用方法[addComment]
2021-03-31 14:46:20.877 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章获取评论的数量   调用方法[getCommentCount]
2021-03-31 14:46:21.396 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:47:57.716 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:48:04.767 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:49:21.905 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:49:41.994 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:50:21.819 [ INFO] [                                            com.example.api.CommentApi: 55] - 添加评论   调用方法[addComment]
2021-03-31 14:51:49.640 [ INFO] [                                      com.example.blog.BlogApplication: 55] - Starting BlogApplication on DESKTOP-6F8VJ3F with PID 20560 (E:\allCode\java\blog_master\target\classes started by asus in E:\allCode\java\blog_master)
2021-03-31 14:51:49.647 [ INFO] [                                      com.example.blog.BlogApplication:651] - No active profile set, falling back to default profiles: default
2021-03-31 14:51:50.474 [ WARN] [tis.spring.mapper.ClassPathMapperScanner: 44] - No MyBatis mapper was found in '[com.example.api]' package. Please check your configuration.
2021-03-31 14:51:50.600 [ INFO] [trationDelegate$BeanPostProcessorChecker:335] - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$ee49d04c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-03-31 14:51:50.641 [ INFO] [n.server.AnnotationActionEndpointMapping:236] - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2021-03-31 14:51:50.974 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:108] - Tomcat initialized with port(s): 8088 (http)
2021-03-31 14:51:50.981 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8088"]
2021-03-31 14:51:50.982 [ INFO] [                              org.apache.catalina.core.StandardService:173] - Starting service [Tomcat]
2021-03-31 14:51:50.982 [ INFO] [                               org.apache.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.35]
2021-03-31 14:51:51.091 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring embedded WebApplicationContext
2021-03-31 14:51:51.091 [ INFO] [                               org.springfra.web.context.ContextLoader:284] - Root WebApplicationContext: initialization completed in 1410 ms
2021-03-31 14:51:51.575 [ INFO] [pertySourcedRequestMappingHandlerMapping: 69] - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-03-31 14:51:51.653 [ INFO] [hedulin.concurren.ThreadPoolTaskExecutor:181] - Initializing ExecutorService 'applicationTaskExecutor'
2021-03-31 14:51:51.861 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8088"]
2021-03-31 14:51:51.884 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:220] - Tomcat started on port(s): 8088 (http) with context path ''
2021-03-31 14:51:51.885 [ INFO] [plugins.DocumentationPluginsBootstrapper:160] - Context refreshed
2021-03-31 14:51:51.899 [ INFO] [plugins.DocumentationPluginsBootstrapper:163] - Found 1 custom documentation plugin(s)
2021-03-31 14:51:51.925 [ INFO] [.web.scanners.ApiListingReferenceScanner: 41] - Scanning for api listing references
2021-03-31 14:51:52.250 [ INFO] [                                      com.example.blog.BlogApplication: 61] - Started BlogApplication in 2.94 seconds (JVM running for 4.436)
2021-03-31 14:53:36.513 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-03-31 14:53:36.514 [ INFO] [.springfra.web.servlet.DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
2021-03-31 14:53:36.523 [ INFO] [.springfra.web.servlet.DispatcherServlet:547] - Completed initialization in 9 ms
2021-03-31 14:53:36.557 [ INFO] [                                    com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2021-03-31 14:53:36.653 [ INFO] [                                    com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2021-03-31 14:53:36.882 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:53:50.372 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 14:55:59.512 [ INFO] [                                            com.example.api.CommentApi: 55] - 添加评论   调用方法[addComment]
2021-03-31 15:02:37.166 [ INFO] [                                            com.example.api.TouristApi: 55] - 注册成为游客   调用方法[signTourist]
2021-03-31 15:02:55.596 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 15:02:58.090 [ INFO] [                                            com.example.api.CommentApi: 55] - 添加评论   调用方法[addComment]
2021-03-31 15:03:02.103 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 15:03:02.477 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 15:03:44.799 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章获取评论的数量   调用方法[getCommentCount]
2021-03-31 15:03:45.029 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 15:03:45.529 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 15:05:52.374 [ WARN] [che.catalina.util.SessionIdGeneratorBase:173] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [234] milliseconds.
2021-03-31 15:05:52.586 [ INFO] [                                               com.example.api.UserApi: 55] - 登录   调用方法[login]
2021-03-31 15:06:16.283 [ INFO] [                                               com.example.api.UserApi: 55] - 登录   调用方法[login]
2021-03-31 15:06:16.512 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:16.796 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:17.206 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 15:06:17.231 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:17.665 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:17.689 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 15:06:21.505 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:22.313 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:22.553 [ INFO] [                                            com.example.api.CommentApi: 55] - 获取所有评论的数量   调用方法[getAllCommentsPage]
2021-03-31 15:06:22.577 [ INFO] [                                            com.example.api.CommentApi: 55] - 分页获取所有评论，需要权限   调用方法[getAllComments]
2021-03-31 15:06:27.993 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:28.788 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:29.028 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 15:06:29.053 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 15:06:29.830 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:30.695 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 15:06:44.045 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:44.324 [ INFO] [                                            com.example.api.ArticleApi: 55] - 发布文章   调用方法[publishArticle]
2021-03-31 15:06:55.785 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:06:56.026 [ INFO] [                                            com.example.api.ArticleApi: 55] - 发布文章   调用方法[publishArticle]
2021-03-31 15:07:44.160 [ INFO] [                                            com.example.api.ArticleApi: 55] - 发布文章   调用方法[publishArticle]
2021-03-31 15:07:44.364 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:05.954 [ INFO] [                                               com.example.api.UserApi: 55] - 退出登录   调用方法[logOut]
2021-03-31 15:08:15.485 [ INFO] [                                               com.example.api.UserApi: 55] - 登录   调用方法[login]
2021-03-31 15:08:15.726 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:15.956 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:16.321 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 15:08:16.346 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:16.685 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:16.837 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 15:08:20.520 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:21.316 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 15:08:36.365 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:36.389 [ INFO] [                                            com.example.api.ArticleApi: 55] - 发布文章   调用方法[publishArticle]
2021-03-31 15:08:36.837 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:37.191 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:37.384 [ INFO] [                                              com.example.api.DraftApi: 55] - 删除草稿，有权限限制   调用方法[deleteDraft]
2021-03-31 15:08:38.296 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 15:08:38.319 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:38.548 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:38.789 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 15:08:43.060 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:44.326 [ INFO] [                                            com.example.api.CommentApi: 55] - 分页获取所有评论，需要权限   调用方法[getAllComments]
2021-03-31 15:08:44.351 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:08:44.351 [ INFO] [                                            com.example.api.CommentApi: 55] - 获取所有评论的数量   调用方法[getAllCommentsPage]
2021-03-31 15:09:02.341 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:09:03.563 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 15:09:03.720 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:09:04.007 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:09:04.033 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 15:10:15.634 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:10:15.840 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:10:16.250 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 15:10:16.275 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:10:16.483 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:10:16.768 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 15:10:20.140 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:10:20.904 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:10:21.134 [ INFO] [                                            com.example.api.CommentApi: 55] - 获取所有评论的数量   调用方法[getAllCommentsPage]
2021-03-31 15:10:21.158 [ INFO] [                                            com.example.api.CommentApi: 55] - 分页获取所有评论，需要权限   调用方法[getAllComments]
2021-03-31 15:10:22.578 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:10:23.341 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:10:23.548 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 15:10:24.092 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 15:10:24.116 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:23:14.361 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:23:22.879 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:23:23.230 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:23:23.448 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 15:23:23.472 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:23:23.702 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:23:23.910 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 15:38:26.951 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:38:31.067 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:38:31.434 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:38:31.663 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 15:38:31.740 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:38:31.922 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 15:38:32.263 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 16:45:38.939 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 16:45:39.214 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 16:45:39.214 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 16:45:43.107 [ INFO] [                                            com.example.api.ArticleApi: 55] - 通过文章主键获取文章   调用方法[getArticleById]
2021-03-31 16:45:43.132 [ INFO] [                                            com.example.api.ArticleApi: 55] - 通过文章主键获取文章   调用方法[getArticleById]
2021-03-31 16:45:43.473 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章获取评论的数量   调用方法[getCommentCount]
2021-03-31 16:45:43.497 [ INFO] [                                             com.example.api.LookedApi: 55] - 阅读这篇文章   调用方法[readArticle]
2021-03-31 16:45:43.497 [ INFO] [                                               com.example.api.GiveApi: 55] - 是否点赞了   调用方法[isLike]
2021-03-31 16:46:21.057 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 16:46:21.082 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 16:46:21.082 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 16:50:36.606 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 16:50:36.977 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 16:50:36.977 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 16:56:36.994 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 16:56:37.595 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 16:56:37.595 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 16:56:42.577 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章获取评论的数量   调用方法[getCommentCount]
2021-03-31 16:56:44.183 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章获取评论的数量   调用方法[getCommentCount]
2021-03-31 16:57:05.367 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 17:02:00.331 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章获取评论的数量   调用方法[getCommentCount]
2021-03-31 17:02:03.900 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 17:02:04.545 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 17:03:35.246 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章获取评论的数量   调用方法[getCommentCount]
2021-03-31 17:03:35.465 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章对评论进行分页获取，如果分页为0，则获取全部   调用方法[getComments]
2021-03-31 17:04:23.528 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:04:36.956 [ INFO] [                                      com.example.blog.BlogApplication: 55] - Starting BlogApplication on DESKTOP-6F8VJ3F with PID 13392 (E:\allCode\java\blog_master\target\classes started by asus in E:\allCode\java\blog_master)
2021-03-31 17:04:36.971 [ INFO] [                                      com.example.blog.BlogApplication:651] - No active profile set, falling back to default profiles: default
2021-03-31 17:04:37.835 [ WARN] [tis.spring.mapper.ClassPathMapperScanner: 44] - No MyBatis mapper was found in '[com.example.api]' package. Please check your configuration.
2021-03-31 17:04:37.965 [ INFO] [trationDelegate$BeanPostProcessorChecker:335] - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$768514cb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-03-31 17:04:38.006 [ INFO] [n.server.AnnotationActionEndpointMapping:236] - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2021-03-31 17:04:38.349 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:108] - Tomcat initialized with port(s): 8088 (http)
2021-03-31 17:04:38.357 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8088"]
2021-03-31 17:04:38.358 [ INFO] [                              org.apache.catalina.core.StandardService:173] - Starting service [Tomcat]
2021-03-31 17:04:38.358 [ INFO] [                               org.apache.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.35]
2021-03-31 17:04:38.473 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring embedded WebApplicationContext
2021-03-31 17:04:38.473 [ INFO] [                               org.springfra.web.context.ContextLoader:284] - Root WebApplicationContext: initialization completed in 1432 ms
2021-03-31 17:04:39.049 [ INFO] [pertySourcedRequestMappingHandlerMapping: 69] - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-03-31 17:04:39.134 [ INFO] [hedulin.concurren.ThreadPoolTaskExecutor:181] - Initializing ExecutorService 'applicationTaskExecutor'
2021-03-31 17:04:39.328 [ INFO] [g.apache.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8088"]
2021-03-31 17:04:39.346 [ INFO] [boot.web.embedded.tomcat.TomcatWebServer:220] - Tomcat started on port(s): 8088 (http) with context path ''
2021-03-31 17:04:39.347 [ INFO] [plugins.DocumentationPluginsBootstrapper:160] - Context refreshed
2021-03-31 17:04:39.360 [ INFO] [plugins.DocumentationPluginsBootstrapper:163] - Found 1 custom documentation plugin(s)
2021-03-31 17:04:39.386 [ INFO] [.web.scanners.ApiListingReferenceScanner: 41] - Scanning for api listing references
2021-03-31 17:04:39.713 [ INFO] [                                      com.example.blog.BlogApplication: 61] - Started BlogApplication in 3.182 seconds (JVM running for 4.667)
2021-03-31 17:05:21.942 [ INFO] [na.core.Container.[Tomcat].[localhos.[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-03-31 17:05:21.943 [ INFO] [.springfra.web.servlet.DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
2021-03-31 17:05:21.951 [ INFO] [.springfra.web.servlet.DispatcherServlet:547] - Completed initialization in 8 ms
2021-03-31 17:05:22.289 [ WARN] [che.catalina.util.SessionIdGeneratorBase:173] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [270] milliseconds.
2021-03-31 17:05:22.307 [ INFO] [                                    com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2021-03-31 17:05:22.410 [ INFO] [                                    com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2021-03-31 17:05:22.650 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:05:43.973 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:06:00.522 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:07:26.989 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:09.929 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:25.717 [ INFO] [                                               com.example.api.UserApi: 55] - 登录   调用方法[login]
2021-03-31 17:08:25.937 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:26.279 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:26.304 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 17:08:26.304 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:26.554 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 17:08:26.579 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:33.419 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:34.227 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:34.252 [ INFO] [                                              com.example.api.DraftApi: 55] - 分页获取草稿   调用方法[getDraftList]
2021-03-31 17:08:34.252 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的总页数   调用方法[getDraftPages]
2021-03-31 17:08:34.252 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:35.583 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:36.363 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:08:36.388 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:08:36.388 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:16:25.407 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:16:59.072 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:17:31.736 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:17:34.274 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:17:53.721 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:19:44.653 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:19:56.584 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:20:11.231 [ INFO] [                                               com.example.api.UserApi: 55] - 登录   调用方法[login]
2021-03-31 17:20:11.472 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:20:11.689 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:20:12.098 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 17:20:12.123 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:20:12.647 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 17:20:12.672 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:22:22.387 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:22:22.719 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:22:23.015 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:22:23.040 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 17:22:23.269 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:22:23.623 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 17:22:57.200 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:22:57.440 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:22:57.896 [ INFO] [                                              com.example.api.DraftApi: 55] - 获取草稿的时间线，有权限要求   调用方法[getTimeCount]
2021-03-31 17:22:57.921 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:22:58.150 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:22:58.390 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的发布时间线,有权限验证   调用方法[getArticleTimeCount]
2021-03-31 17:23:00.286 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:23:01.032 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:23:01.405 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:23:01.556 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:23:48.538 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:23:48.845 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:23:49.255 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:23:49.360 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:23:49.360 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:24:15.962 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:24:16.469 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:24:16.675 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:24:16.756 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:24:16.756 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:24:42.086 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:24:42.787 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:24:42.812 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:24:42.812 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:24:42.812 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:26:51.214 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:26:51.239 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:26:51.618 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:27:16.267 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:27:16.529 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:27:16.949 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:27:17.051 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:27:17.051 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:28:05.403 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:28:05.427 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:28:05.657 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:28:29.085 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:28:29.417 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:28:29.658 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:28:29.683 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:28:29.683 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:30:45.100 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:30:45.340 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:30:45.364 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:30:47.903 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:30:48.209 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:30:48.696 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:30:48.835 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:30:48.999 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:30:49.871 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:30:52.546 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:30:52.786 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:30:53.060 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:30:53.085 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:31:40.005 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:31:40.233 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:31:40.404 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:31:43.349 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:31:43.729 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:31:43.992 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:31:44.219 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:31:44.219 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:33:29.967 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:33:30.478 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:33:30.697 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:33:30.721 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:33:30.721 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:33:44.729 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:33:44.831 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:33:44.983 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:42:33.399 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:42:33.751 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:42:34.080 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:42:34.104 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:42:34.104 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:42:38.397 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:42:44.059 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
2021-03-31 17:43:43.826 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:43:44.216 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 17:43:44.216 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:43:45.417 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:43:45.530 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 17:43:45.530 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:43:50.241 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:43:50.266 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:43:50.753 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:43:50.777 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:45:24.847 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:45:24.985 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:45:24.986 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 17:45:46.168 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:45:46.444 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 17:45:46.444 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:45:52.173 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章总数   调用方法[getArticlePages]
2021-03-31 17:45:52.198 [ INFO] [                                            com.example.api.ArticleApi: 55] - 获取文章的所有种类   调用方法[getAllType]
2021-03-31 17:45:52.198 [ INFO] [                                            com.example.api.ArticleApi: 55] - 分页获取文章列表   调用方法[getArticles]
2021-03-31 17:46:11.642 [ INFO] [                                            com.example.api.CommentApi: 55] - 按文章获取评论的数量   调用方法[getCommentCount]
2021-03-31 18:03:31.411 [ INFO] [                                               com.example.api.UserApi: 55] - 使用cookie登录   调用方法[cookieLogin]
